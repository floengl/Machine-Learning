23.02.2025 00:59:09
History:
                                                                                                                                                          model  ...                                                                                                                                             model_info
22  RandomForestRegressor(input_matrix, RandomForestRegressor__max_depth=200, RandomForestRegressor__max_features=sqrt, RandomForestRegressor__n_estimators=90)  ...   {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -9.539261808374436}
21   RandomForestRegressor(input_matrix, RandomForestRegressor__max_depth=30, RandomForestRegressor__max_features=sqrt, RandomForestRegressor__n_estimators=40)  ...   {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -9.659146432155117}
7                                                               KNeighborsRegressor(input_matrix, KNeighborsRegressor__n_neighbors=3, KNeighborsRegressor__p=1)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -11.173961549165554}
15                                                              KNeighborsRegressor(input_matrix, KNeighborsRegressor__n_neighbors=5, KNeighborsRegressor__p=1)  ...   {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -11.59198479168132}
14   RandomForestRegressor(input_matrix, RandomForestRegressor__max_depth=10, RandomForestRegressor__max_features=log2, RandomForestRegressor__n_estimators=90)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -11.751541082332468}
11                                                             KNeighborsRegressor(input_matrix, KNeighborsRegressor__n_neighbors=20, KNeighborsRegressor__p=1)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -13.481819233621827}
8                                                                                              Ridge(input_matrix, Ridge__alpha=0.1, Ridge__fit_intercept=True)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -17.648761545102953}
17                                                                                           Ridge(input_matrix, Ridge__alpha=0.001, Ridge__fit_intercept=True)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -17.649023477373927}
2                                                                                             Ridge(input_matrix, Ridge__alpha=0.1, Ridge__fit_intercept=False)  ...   {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -17.65504227812831}
10                                                                                               Ridge(input_matrix, Ridge__alpha=1, Ridge__fit_intercept=True)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -17.657312630381302}
23                                                                                              Ridge(input_matrix, Ridge__alpha=1, Ridge__fit_intercept=False)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -17.662842372096325}
12                                                                                              Ridge(input_matrix, Ridge__alpha=10, Ridge__fit_intercept=True)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -17.721247170960797}
19                                                                                           Lasso(input_matrix, Lasso__alpha=0.01, Lasso__fit_intercept=False)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -17.995811097552277}
20                                                                                           Ridge(input_matrix, Ridge__alpha=1000, Ridge__fit_intercept=False)  ...    {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -18.0448272428919}
5                                                                                                Lasso(input_matrix, Lasso__alpha=1, Lasso__fit_intercept=True)  ...   {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -18.35851431015985}
9                                                                                               Lasso(input_matrix, Lasso__alpha=1, Lasso__fit_intercept=False)  ...   {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -18.51543231753367}
1                                                             LinearSVR(input_matrix, LinearSVR__C=10, LinearSVR__fit_intercept=True, LinearSVR__max_iter=2000)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -25.000211578950786}
13                                                         LinearSVR(input_matrix, LinearSVR__C=0.001, LinearSVR__fit_intercept=True, LinearSVR__max_iter=2000)  ...   {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -25.43105204689574}
18                                                                                            Lasso(input_matrix, Lasso__alpha=1000, Lasso__fit_intercept=True)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -25.525746247215498}
4                                                         LinearSVR(input_matrix, LinearSVR__C=0.01, LinearSVR__fit_intercept=False, LinearSVR__max_iter=10000)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -27.133755516503626}
3                                                            LinearSVR(input_matrix, LinearSVR__C=1, LinearSVR__fit_intercept=False, LinearSVR__max_iter=10000)  ...  {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -28.394387645527132}
16                                                         LinearSVR(input_matrix, LinearSVR__C=0.1, LinearSVR__fit_intercept=False, LinearSVR__max_iter=10000)  ...   {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -32.84648695095556}
6                                                               KNeighborsRegressor(input_matrix, KNeighborsRegressor__n_neighbors=5, KNeighborsRegressor__p=5)  ...                 {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -inf}
0                                                               KNeighborsRegressor(input_matrix, KNeighborsRegressor__n_neighbors=3, KNeighborsRegressor__p=3)  ...                 {'generation': 0, 'mutation_count': 0, 'crossover_count': 0, 'predecessor': ('ROOT',), 'operator_count': 1, 'internal_cv_score': -inf}

[24 rows x 3 columns]


